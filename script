"""
Rossmann Store Sales Analysis
Author: YOUR NAME
Source: https://www.kaggle.com/c/rossmann-store-sales/data
"""

# =====================================================================
# TASK #1: IMPORT LIBRARIES
# =====================================================================
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Configure visualization style
sns.set(style="whitegrid", palette="muted")
plt.rcParams["figure.figsize"] = (10, 5)


# =====================================================================
# TASK #2: LOAD DATASETS
# =====================================================================
# Load training data
sales_train_df = pd.read_csv("data/train.csv")
print(sales_train_df.head())
print(sales_train_df.info())
print(sales_train_df.describe())

# Load store information data
store_info_df = pd.read_csv("data/store.csv")
print(store_info_df.head())
print(store_info_df.info())
print(store_info_df.describe())


# =====================================================================
# TASK #3: EXPLORE SALES TRAINING DATA
# =====================================================================
# Missing values heatmap
sns.heatmap(sales_train_df.isnull(), yticklabels=False, cbar=False, cmap="Blues")
plt.title("Missing Values in Sales Data")
plt.show()

# Histograms
sales_train_df.hist(bins=30, figsize=(20, 20), color="r")
plt.show()

# Check open/closed stores
closed_train_df = sales_train_df[sales_train_df["Open"] == 0]
open_train_df = sales_train_df[sales_train_df["Open"] == 1]
print("Total records =", len(sales_train_df))
print("Closed stores =", len(closed_train_df))
print("Open stores   =", len(open_train_df))

# Keep only open stores
sales_train_df = open_train_df.copy()
sales_train_df.drop(["Open"], axis=1, inplace=True)
print(sales_train_df.describe())


# =====================================================================
# TASK #4: EXPLORE STORE INFORMATION DATA
# =====================================================================
sns.heatmap(store_info_df.isnull(), yticklabels=False, cbar=False, cmap="Blues")
plt.title("Missing Values in Store Info")
plt.show()

# Fill missing values
fill_cols = [
    "Promo2SinceWeek", "Promo2SinceYear", "PromoInterval",
    "CompetitionOpenSinceYear", "CompetitionOpenSinceMonth"
]
for col in fill_cols:
    store_info_df[col].fillna(0, inplace=True)

# Fill CompetitionDistance with mean
store_info_df["CompetitionDistance"].fillna(
    store_info_df["CompetitionDistance"].mean(), inplace=True
)

sns.heatmap(store_info_df.isnull(), yticklabels=False, cbar=False, cmap="Blues")
plt.title("Missing Values After Cleaning")
plt.show()

store_info_df.hist(bins=30, figsize=(20, 20), color="r")
plt.show()


# =====================================================================
# TASK #5: MERGE DATASETS
# =====================================================================
sales_train_all_df = pd.merge(sales_train_df, store_info_df, on="Store", how="inner")
sales_train_all_df["Date"] = pd.to_datetime(sales_train_all_df["Date"])

print(sales_train_all_df.info())
sales_train_all_df.to_csv("data/merged_sales.csv", index=False)


# =====================================================================
# TASK #6: CORRELATION ANALYSIS
# =====================================================================
numeric_df = sales_train_all_df.select_dtypes(include=["number"])
correlations = numeric_df.corr()

plt.figure(figsize=(20, 20))
sns.heatmap(correlations, annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5)
plt.title("Correlation Heatmap")
plt.show()

print("Correlation with Sales:")
print(correlations["Sales"].sort_values())


# =====================================================================
# TASK #7: FEATURE ENGINEERING
# =====================================================================
sales_train_all_df["Year"] = sales_train_all_df["Date"].dt.year
sales_train_all_df["Month"] = sales_train_all_df["Date"].dt.month
sales_train_all_df["Day"] = sales_train_all_df["Date"].dt.day
sales_train_all_df["DayOfWeek"] = sales_train_all_df["Date"].dt.dayofweek


# =====================================================================
# TASK #8: VISUALIZATION
# =====================================================================
# Sales per month
sales_train_all_df.groupby("Month")["Sales"].mean().plot(marker="o", color="r")
plt.title("Average Sales Per Month")
plt.show()

# Customers per month
sales_train_all_df.groupby("Month")["Customers"].mean().plot(marker="^", color="b")
plt.title("Average Customers Per Month")
plt.show()

# Sales per day
sales_train_all_df.groupby("Day")["Sales"].mean().plot(marker="o", color="r")
plt.title("Average Sales Per Day of Month")
plt.show()

# Customers per day
sales_train_all_df.groupby("Day")["Customers"].mean().plot(marker="^", color="b")
plt.title("Average Customers Per Day of Month")
plt.show()

# Sales per day of week
sales_train_all_df.groupby("DayOfWeek")["Sales"].mean().plot(marker="o", color="r")
plt.title("Average Sales Per Day of Week")
plt.show()

# Customers per day of week
sales_train_all_df.groupby("DayOfWeek")["Customers"].mean().plot(marker="^", color="b")
plt.title("Average Customers Per Day of Week")
plt.show()

# Sales by StoreType over time
sales_by_store = sales_train_all_df.groupby(["Date", "StoreType"])["Sales"].mean().unstack()
sales_by_store.plot(figsize=(20, 10))
plt.title("Sales by Store Type Over Time")
plt.show()

# Promo impact: Barplots
plt.figure(figsize=(15, 10))
plt.subplot(211)
sns.barplot(x="Promo", y="Sales", data=sales_train_all_df)
plt.title("Sales by Promo")

plt.subplot(212)
sns.barplot(x="Promo", y="Customers", data=sales_train_all_df)
plt.title("Customers by Promo")
plt.show()

# Promo impact: Violin plots
plt.figure(figsize=(15, 10))
plt.subplot(211)
sns.violinplot(x="Promo", y="Sales", data=sales_train_all_df)
plt.title("Sales Distribution by Promo")

plt.subplot(212)
sns.violinplot(x="Promo", y="Customers", data=sales_train_all_df)
plt.title("Customers Distribution by Promo")
plt.show()
